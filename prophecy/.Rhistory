#melt_data_for_all_files$value = as.numeric( melt_data_for_all_files$value )
plot_ly(data_for_all_files,x = ~TimeStamp, y = ~value, colour = ~sensor_no ) %>%
add_lines() %>%
layout(showlegend = FALSE)%>%
layout( title = paste0( 'Variation of ', var, ' with Time' ),
xaxis = list(title = 'Date Time'),
yaxis = list(title = paste0("Value ", var )))
}
Multiple_Line_Plot( path, 'Z' )
shiny::runApp('E:/projects/Chetan/codes old/sensor_analytics')
Multiple_Line_Plot = function( path, var ){
file_names = list.files( path )
baseline = fread( paste0( path, file_names[1] ) )
baseline_values = baseline[[var]]
req_stat_list = lapply( file_names, function( single_file ){
selected_file_data = fread( paste0( path, single_file ) )
df = data.frame( TimeStamp = rm_between(single_file, 'Sensors_', '.csv', extract=TRUE)[[1]], value = selected_file_data[[var]] - baseline_values )
df$sensor_no = as.factor( as.character( 1:nrow( df ) ) )
row.names( df ) = NULL
return(df)
} )
data_for_all_files = bind_rows( req_stat_list )
#melt_data_for_all_files = melt(data = data_for_all_files, id.vars = "TimeStamp")
#melt_data_for_all_files$value = as.numeric( melt_data_for_all_files$value )
plot_ly(data_for_all_files,x = ~TimeStamp, y = ~value, colour = ~sensor_no ) %>%
add_lines() %>%
layout(showlegend = FALSE)%>%
layout( title = paste0( 'Variation of ', var, ' with Time' ),
xaxis = list(title = 'Date Time'),
yaxis = list(title = paste0("Value ", var )))
}
Multiple_Line_Plot( path, 'Z' )
rm( list = ls() )
library( dplyr ); library( plotly ) ; library( reshape2 ) ; library( data.table ) ; library( qdapRegex )
path = 'E:/projects/Chetan/data/clam_shells/'
var = "X"
Multiple_Line_Plot = function( path, var ){
file_names = list.files( path )
baseline = fread( paste0( path, file_names[1] ) )
baseline_values = baseline[[var]]
req_stat_list = lapply( file_names, function( single_file ){
selected_file_data = fread( paste0( path, single_file ) )
df = data.frame( TimeStamp = rm_between(single_file, 'Sensors_', '.csv', extract=TRUE)[[1]], value = selected_file_data[[var]] - baseline_values )
df$sensor_no = as.factor( as.character( 1:nrow( df ) ) )
row.names( df ) = NULL
return(df)
} )
data_for_all_files = bind_rows( req_stat_list )
#melt_data_for_all_files = melt(data = data_for_all_files, id.vars = "TimeStamp")
#melt_data_for_all_files$value = as.numeric( melt_data_for_all_files$value )
plot_ly(data_for_all_files,x = ~TimeStamp, y = ~value, colour = ~sensor_no ) %>%
add_lines() %>%
layout(showlegend = True)%>%
layout( title = paste0( 'Variation of ', var, ' with Time' ),
xaxis = list(title = 'Date Time'),
yaxis = list(title = paste0("Value ", var )))
}
Multiple_Line_Plot( path, 'Z' )
rm( list = ls() )
library( dplyr ); library( plotly ) ; library( reshape2 ) ; library( data.table ) ; library( qdapRegex )
path = 'E:/projects/Chetan/data/clam_shells/'
var = "X"
Multiple_Line_Plot = function( path, var ){
file_names = list.files( path )
baseline = fread( paste0( path, file_names[1] ) )
baseline_values = baseline[[var]]
req_stat_list = lapply( file_names, function( single_file ){
selected_file_data = fread( paste0( path, single_file ) )
df = data.frame( TimeStamp = rm_between(single_file, 'Sensors_', '.csv', extract=TRUE)[[1]], value = selected_file_data[[var]] - baseline_values )
df$sensor_no = as.factor( as.character( 1:nrow( df ) ) )
row.names( df ) = NULL
return(df)
} )
data_for_all_files = bind_rows( req_stat_list )
#melt_data_for_all_files = melt(data = data_for_all_files, id.vars = "TimeStamp")
#melt_data_for_all_files$value = as.numeric( melt_data_for_all_files$value )
plot_ly(data_for_all_files,x = ~TimeStamp, y = ~value, colour = ~sensor_no ) %>%
add_lines() %>%
layout(showlegend = TRUE)%>%
layout( title = paste0( 'Variation of ', var, ' with Time' ),
xaxis = list(title = 'Date Time'),
yaxis = list(title = paste0("Value ", var )))
}
Multiple_Line_Plot( path, 'Z' )
rm( list = ls() )
library( dplyr ); library( plotly ) ; library( reshape2 ) ; library( data.table ) ; library( qdapRegex )
path = 'E:/projects/Chetan/data/clam_shells/'
var = "X"
Multiple_Line_Plot = function( path, var ){
file_names = list.files( path )
baseline = fread( paste0( path, file_names[1] ) )
baseline_values = baseline[[var]]
req_stat_list = lapply( file_names, function( single_file ){
selected_file_data = fread( paste0( path, single_file ) )
df = data.frame( TimeStamp = rm_between(single_file, 'Sensors_', '.csv', extract=TRUE)[[1]], value = selected_file_data[[var]] - baseline_values )
df$sensor_no = as.factor( as.character( 1:nrow( df ) ) )
row.names( df ) = NULL
return(df)
} )
data_for_all_files = bind_rows( req_stat_list )
#melt_data_for_all_files = melt(data = data_for_all_files, id.vars = "TimeStamp")
#melt_data_for_all_files$value = as.numeric( melt_data_for_all_files$value )
plot_ly(data_for_all_files,x = ~TimeStamp, y = ~value, colour = ~sensor_no ) %>%
# add_lines() %>%
layout(showlegend = TRUE)%>%
layout( title = paste0( 'Variation of ', var, ' with Time' ),
xaxis = list(title = 'Date Time'),
yaxis = list(title = paste0("Value ", var )))
}
Multiple_Line_Plot( path, 'Z' )
runApp('E:/projects/Chetan/codes old/sensor_analytics')
source <- "https://raw.githubusercontent.com/sveisa/r/master/tot_summary.csv"
data <- read_csv(url(source)) %>%
# not necessary, just for clarity reasons
dplyr::arrange(ticker, year)
plot_ly(data, x = ~year,
y = ~all_terms_ratio,
# groups and assigns different colors in one step
color = ~ticker,
# name = 'all_terms',
type = 'scatter',
mode = 'lines+markers')
df <- data.frame(Month_Considered = seq.Date(from = as.Date("2017-01-01"), by = "months", length.out = 12),
pct.x = seq(from = 70, to = 80, length.out = 12),
pct.y = seq(from = 30, to = 40, length.out = 12),
pct = seq(from = 10, to = 20, length.out = 12))
View( df )
df2 = melt(data = df, id.vars = "Month_Considered")
View( df2 )
plot_ly(data_for_all_files,x = ~Month_Considered, y = ~value, colour = ~variable ) %>% add_lines()
plot_ly(df2,x = ~Month_Considered, y = ~value, colour = ~variable ) %>% add_lines()
plot_ly(df2,x = ~Month_Considered, y = ~value, color = ~variable ) %>% add_lines()
df2 = melt(data = df, id.vars = "Month_Considered")
rm( list = ls() )
library( dplyr ); library( plotly ) ; library( reshape2 ) ; library( data.table ) ; library( qdapRegex )
path = 'E:/projects/Chetan/data/clam_shells/'
var = "X"
Multiple_Line_Plot = function( path, var ){
file_names = list.files( path )
baseline = fread( paste0( path, file_names[1] ) )
baseline_values = baseline[[var]]
req_stat_list = lapply( file_names, function( single_file ){
selected_file_data = fread( paste0( path, single_file ) )
df = data.frame( TimeStamp = rm_between(single_file, 'Sensors_', '.csv', extract=TRUE)[[1]], value = selected_file_data[[var]] - baseline_values )
df$sensor_no = as.factor( as.character( 1:nrow( df ) ) )
row.names( df ) = NULL
return(df)
} )
data_for_all_files = bind_rows( req_stat_list )
#melt_data_for_all_files = melt(data = data_for_all_files, id.vars = "TimeStamp")
#melt_data_for_all_files$value = as.numeric( melt_data_for_all_files$value )
plot_ly(data_for_all_files,x = ~TimeStamp, y = ~value, color = ~sensor_no ) %>%
add_lines() %>%
layout(showlegend = TRUE)%>%
layout( title = paste0( 'Variation of ', var, ' with Time' ),
xaxis = list(title = 'Date Time'),
yaxis = list(title = paste0("Value ", var )))
}
Multiple_Line_Plot( path, 'Z' )
rm( list = ls() )
library( dplyr ); library( plotly ) ; library( reshape2 ) ; library( data.table ) ; library( qdapRegex )
path = 'E:/projects/Chetan/data/clam_shells/'
var = "X"
Multiple_Line_Plot = function( path, var ){
file_names = list.files( path )
baseline = fread( paste0( path, file_names[1] ) )
baseline_values = baseline[[var]]
req_stat_list = lapply( file_names, function( single_file ){
selected_file_data = fread( paste0( path, single_file ) )
df = data.frame( TimeStamp = rm_between(single_file, 'Sensors_', '.csv', extract=TRUE)[[1]], value = selected_file_data[[var]] - baseline_values )
df$sensor_no = as.factor( as.character( 1:nrow( df ) ) )
row.names( df ) = NULL
return(df)
} )
data_for_all_files = bind_rows( req_stat_list )
#melt_data_for_all_files = melt(data = data_for_all_files, id.vars = "TimeStamp")
#melt_data_for_all_files$value = as.numeric( melt_data_for_all_files$value )
plot_ly(data_for_all_files,x = ~TimeStamp, y = ~value, color = ~sensor_no ) %>%
add_lines() %>%
layout(showlegend = FALSE)%>%
layout( title = paste0( 'Variation of ', var, ' with Time' ),
xaxis = list(title = 'Date Time'),
yaxis = list(title = paste0("Value ", var )))
}
Multiple_Line_Plot( path, 'Z' )
rm( list = ls() )
library( dplyr ); library( plotly ) ; library( reshape2 ) ; library( data.table ) ; library( qdapRegex )
path = 'E:/projects/Chetan/data/clam_shells/'
var = "X"
Multiple_Line_Plot = function( path, var ){
file_names = list.files( path )
baseline = fread( paste0( path, file_names[1] ) )
baseline_values = baseline[[var]]
req_stat_list = lapply( file_names, function( single_file ){
selected_file_data = fread( paste0( path, single_file ) )
df = data.frame( TimeStamp = rm_between(single_file, 'Sensors_', '.csv', extract=TRUE)[[1]], value = selected_file_data[[var]] - baseline_values )
df$sensor_no = as.factor( as.character( 1:nrow( df ) ) )
row.names( df ) = NULL
return(df)
} )
data_for_all_files = bind_rows( req_stat_list )
#melt_data_for_all_files = melt(data = data_for_all_files, id.vars = "TimeStamp")
#melt_data_for_all_files$value = as.numeric( melt_data_for_all_files$value )
plot_ly(data_for_all_files,x = ~TimeStamp, y = ~value, color = ~sensor_no ) %>%
add_lines() %>%
layout(showlegend = FALSE)%>%
layout( title = paste0( 'Variation of ', var, ' with Time' ),
xaxis = list(title = 'Date Time'),
yaxis = list(title = paste0("Value of ", var )))
}
Multiple_Line_Plot( path, 'X' )
Multiple_Line_Plot( path, 'Y' )
Multiple_Line_Plot( path, 'Z' )
shiny::runApp('E:/projects/Chetan/shiny_apps/dashboard_global')
shiny::runApp('E:/projects/Chetan/shiny_apps/dashboard_global')
shiny::runApp('E:/projects/Chetan/shiny_apps/dashboard_global')
shiny::runApp('E:/projects/Chetan/shiny_apps/dashboard_global')
shiny::runApp('E:/projects/Chetan/shiny_apps/dashboard_global')
shiny::runApp('E:/projects/Chetan/shiny_apps/dashboard_global')
rm( list = ls() )
library( dplyr ); library( plotly ) ; library( reshape2 ) ; library( data.table ) ; library( qdapRegex )
path = 'E:/projects/Chetan/data/clam_shells/'
#var = "X"
Multiple_Line_Plot = function( path, var ){
file_names = list.files( path )
baseline = fread( paste0( path, file_names[1] ) )
baseline_values = baseline[[var]]
req_stat_list = lapply( file_names, function( single_file ){
selected_file_data = fread( paste0( path, single_file ) )
df = data.frame( TimeStamp = rm_between(single_file, 'Sensors_', '.csv', extract=TRUE)[[1]], value = selected_file_data[[var]] - baseline_values )
df$sensor_no = as.factor( as.character( 1:nrow( df ) ) )
row.names( df ) = NULL
return(df)
} )
data_for_all_files = bind_rows( req_stat_list )
#melt_data_for_all_files = melt(data = data_for_all_files, id.vars = "TimeStamp")
#melt_data_for_all_files$value = as.numeric( melt_data_for_all_files$value )
plot_ly(data_for_all_files,x = ~TimeStamp, y = ~value, color = ~sensor_no ) %>%
add_lines() %>%
layout(showlegend = FALSE)%>%
layout( title = paste0( 'Variation of ', var, ' with Time' ),
xaxis = list(title = 'Date Time'),
yaxis = list(title = paste0("Value of ", var )))
}
Multiple_Line_Plot( path, 'Z' )
shiny::runApp('E:/projects/Chetan/shiny_apps/dashboard_global')
rm( list = ls() )
library( dplyr ); library( plotly ) ; library( reshape2 ) ; library( data.table ) ; library( qdapRegex )
path = 'E:/projects/Chetan/data/clam_shells/'
#var = "X"
Multiple_Line_Plot = function( path, var ){
file_names = list.files( path )
baseline = fread( paste0( path, file_names[1] ) )
baseline_values = baseline[[var]]
req_stat_list = lapply( file_names, function( single_file ){
selected_file_data = fread( paste0( path, single_file ) )
df = data.frame( TimeStamp = rm_between(single_file, 'Sensors_', '.csv', extract=TRUE)[[1]], value = selected_file_data[[var]] - baseline_values )
df$sensor_no = as.factor( as.character( 1:nrow( df ) ) )
row.names( df ) = NULL
return(df)
} )
data_for_all_files = bind_rows( req_stat_list )
#melt_data_for_all_files = melt(data = data_for_all_files, id.vars = "TimeStamp")
#melt_data_for_all_files$value = as.numeric( melt_data_for_all_files$value )
plot_ly(data_for_all_files,x = ~TimeStamp, y = ~value, color = ~sensor_no ) %>%
add_lines() %>%
layout(showlegend = FALSE)%>%
layout( title = paste0( 'Variation of ', var, ' with Time' ),
xaxis = list(title = 'Date Time'),
yaxis = list(title = paste0("Value of ", var )))
}
Multiple_Line_Plot( path, 'Z' )
rm( list = ls() )
library( dplyr ); library( plotly ) ; library( reshape2 ) ; library( data.table ) ; library( qdapRegex )
path = 'E:/projects/Chetan/data/clam_shells/converted_mat'
#var = "X"
Multiple_Line_Plot = function( path, var ){
file_names = list.files( path )
baseline = fread( paste0( path, file_names[1] ) )
baseline_values = baseline[[var]]
req_stat_list = lapply( file_names, function( single_file ){
selected_file_data = fread( paste0( path, single_file ) )
df = data.frame( TimeStamp = rm_between(single_file, 'Sensors_', '.csv', extract=TRUE)[[1]], value = selected_file_data[[var]] - baseline_values )
df$sensor_no = as.factor( as.character( 1:nrow( df ) ) )
row.names( df ) = NULL
return(df)
} )
data_for_all_files = bind_rows( req_stat_list )
#melt_data_for_all_files = melt(data = data_for_all_files, id.vars = "TimeStamp")
#melt_data_for_all_files$value = as.numeric( melt_data_for_all_files$value )
plot_ly(data_for_all_files,x = ~TimeStamp, y = ~value, color = ~sensor_no ) %>%
add_lines() %>%
layout(showlegend = FALSE)%>%
layout( title = paste0( 'Variation of ', var, ' with Time' ),
xaxis = list(title = 'Date Time'),
yaxis = list(title = paste0("Value of ", var )))
}
Multiple_Line_Plot( path, 'Z' )
rm( list = ls() )
library( dplyr ); library( plotly ) ; library( reshape2 ) ; library( data.table ) ; library( qdapRegex )
path = 'E:/projects/Chetan/data/clam_shells/converted_mat/Processed'
#var = "X"
Multiple_Line_Plot = function( path, var ){
file_names = list.files( path )
baseline = fread( paste0( path, file_names[1] ) )
baseline_values = baseline[[var]]
req_stat_list = lapply( file_names, function( single_file ){
selected_file_data = fread( paste0( path, single_file ) )
df = data.frame( TimeStamp = rm_between(single_file, 'Sensors_', '.csv', extract=TRUE)[[1]], value = selected_file_data[[var]] - baseline_values )
df$sensor_no = as.factor( as.character( 1:nrow( df ) ) )
row.names( df ) = NULL
return(df)
} )
data_for_all_files = bind_rows( req_stat_list )
#melt_data_for_all_files = melt(data = data_for_all_files, id.vars = "TimeStamp")
#melt_data_for_all_files$value = as.numeric( melt_data_for_all_files$value )
plot_ly(data_for_all_files,x = ~TimeStamp, y = ~value, color = ~sensor_no ) %>%
add_lines() %>%
layout(showlegend = FALSE)%>%
layout( title = paste0( 'Variation of ', var, ' with Time' ),
xaxis = list(title = 'Date Time'),
yaxis = list(title = paste0("Value of ", var )))
}
Multiple_Line_Plot( path, 'Z' )
rm( list = ls() )
library( dplyr ); library( plotly ) ; library( reshape2 ) ; library( data.table ) ; library( qdapRegex )
path = 'E:/projects/Chetan/data/clam_shells/converted_mat/Processed/'
#var = "X"
Multiple_Line_Plot = function( path, var ){
file_names = list.files( path )
baseline = fread( paste0( path, file_names[1] ) )
baseline_values = baseline[[var]]
req_stat_list = lapply( file_names, function( single_file ){
selected_file_data = fread( paste0( path, single_file ) )
df = data.frame( TimeStamp = rm_between(single_file, 'Sensors_', '.csv', extract=TRUE)[[1]], value = selected_file_data[[var]] - baseline_values )
df$sensor_no = as.factor( as.character( 1:nrow( df ) ) )
row.names( df ) = NULL
return(df)
} )
data_for_all_files = bind_rows( req_stat_list )
#melt_data_for_all_files = melt(data = data_for_all_files, id.vars = "TimeStamp")
#melt_data_for_all_files$value = as.numeric( melt_data_for_all_files$value )
plot_ly(data_for_all_files,x = ~TimeStamp, y = ~value, color = ~sensor_no ) %>%
add_lines() %>%
layout(showlegend = FALSE)%>%
layout( title = paste0( 'Variation of ', var, ' with Time' ),
xaxis = list(title = 'Date Time'),
yaxis = list(title = paste0("Value of ", var )))
}
Multiple_Line_Plot( path, 'Z' )
rm( list = ls() )
library( dplyr ); library( plotly ) ; library( reshape2 ) ; library( data.table ) ; library( qdapRegex )
path = 'E:/projects/Chetan/data/clam_shells/converted_mat/'
#var = "X"
Multiple_Line_Plot = function( path, var ){
file_names = list.files( path )
baseline = fread( paste0( path, file_names[1] ) )
baseline_values = baseline[[var]]
req_stat_list = lapply( file_names, function( single_file ){
selected_file_data = fread( paste0( path, single_file ) )
df = data.frame( TimeStamp = rm_between(single_file, 'Sensors_', '.csv', extract=TRUE)[[1]], value = selected_file_data[[var]] - baseline_values )
df$sensor_no = as.factor( as.character( 1:nrow( df ) ) )
row.names( df ) = NULL
return(df)
} )
data_for_all_files = bind_rows( req_stat_list )
#melt_data_for_all_files = melt(data = data_for_all_files, id.vars = "TimeStamp")
#melt_data_for_all_files$value = as.numeric( melt_data_for_all_files$value )
plot_ly(data_for_all_files,x = ~TimeStamp, y = ~value, color = ~sensor_no ) %>%
add_lines() %>%
layout(showlegend = FALSE)%>%
layout( title = paste0( 'Variation of ', var, ' with Time' ),
xaxis = list(title = 'Date Time'),
yaxis = list(title = paste0("Value of ", var )))
}
Multiple_Line_Plot( path, 'Z' )
rm( list = ls() )
library( rmatio ) ; library( dplyr )
n_row = 14 ; n_col = 24
data_dim = n_row*n_col
data_dir = 'E:\\projects\\Chetan\\data\\clam_shells'    #... data folder...  modify here
mat_output_dir = paste0( data_dir, '\\\\converted_mat' )
dir.create( mat_output_dir )
unlink( paste0( mat_output_dir, '/*' ) )
filenames = list.files( data_dir, pattern = '.csv', full.names = T )
basenames = gsub( 'Sensors_', '', gsub( '.csv', '', basename( filenames ) ) )   #.... strip prefix... modify here
mat_df = read.mat( "E:\\projects\\Chetan\\sample_mat.mat" )
baseline_csv_0 = read.csv( filenames[1], stringsAsFactors = F )
baseline_csv = baseline_csv_0[ 1:data_dim, ]
new_mat_df = list()
for( i in seq.int( 1, length( filenames ) ) ){
current_csv_0 = read.csv( filenames[i], stringsAsFactors = F )
effective_csv = current_csv_0[ 1:data_dim, ]    #..... change to number of rows if required
new_mat_df[[i]] = mat_df
#..... data component ....
bx_values = as.numeric( effective_csv$X )
# new_mat_df[[i]]$data$Bx = list( matrix( c( bx_values, rep( mean( bx_values ), 140 ) ), ncol = n_col ) )
new_mat_df[[i]]$data$Bx = list( matrix( c( bx_values ), ncol = n_col ) )
by_values = as.numeric( effective_csv$Y )
new_mat_df[[i]]$data$By = list( matrix( c( by_values ), ncol = n_col ) )
bz_values = as.numeric( effective_csv$Z )
new_mat_df[[i]]$data$Bz = list( matrix( c( bz_values ), ncol = n_col ) )
T_values = as.numeric( effective_csv$T )
new_mat_df[[i]]$data$Tp = list( matrix( c( T_values ), ncol = n_col ) )
new_mat_df[[i]]$data$sensor$nXSensors = list( n_row )
new_mat_df[[i]]$data$sensor$nYSensors = list( n_col )
#..... baseline component ...
bs_bx_values = as.numeric( baseline_csv$X )
new_mat_df[[i]]$data_baseline$Bx = list( matrix( c( bs_bx_values ), ncol = n_col ) )
bs_by_values = as.numeric( baseline_csv$Y )
new_mat_df[[i]]$data_baseline$By = list( matrix( c( bs_by_values ), ncol = n_col ) )
bs_bz_values = as.numeric( baseline_csv$Z )
new_mat_df[[i]]$data_baseline$Bz = list( matrix( c( bs_bz_values ), ncol = n_col ) )
bs_T_values = as.numeric( baseline_csv$T )
new_mat_df[[i]]$data_baseline$Tp = list( matrix( c( bs_T_values ), ncol = n_col ) )
new_mat_df[[i]]$data_baseline$sensor$nXSensors = list( n_row )
new_mat_df[[i]]$data_baseline$sensor$nYSensors = list( n_col )
#..... data_comp component ...
new_mat_df[[i]]$data_comp$Bx = list( new_mat_df[[i]]$data$Bx[[1]] - new_mat_df[[i]]$data_baseline$Bx[[1]] )
new_mat_df[[i]]$data_comp$By = list( new_mat_df[[i]]$data$By[[1]] - new_mat_df[[i]]$data_baseline$By[[1]] )
new_mat_df[[i]]$data_comp$Bz = list( new_mat_df[[i]]$data$Bz[[1]] - new_mat_df[[i]]$data_baseline$Bz[[1]] )
new_mat_df[[i]]$data_comp$Tp = list( new_mat_df[[i]]$data$Tp[[1]] - new_mat_df[[i]]$data_baseline$Tp[[1]] )
new_mat_df[[i]]$data_comp$sensor$nXSensors = list( n_row )
new_mat_df[[i]]$data_comp$sensor$nYSensors = list( n_col )
#... patchtype
new_mat_df[[i]]$data$sensor$patchType = 'x14_24.mat'
comp = unlist( strsplit( basenames[i], '_' ) )[1:2]
mat_file_name = paste0( paste( substr( comp[1], 1, 4 ), substr( comp[1], 5, 6 ), substr( comp[1], 7, 8 ), sep = '-' ),
'_', paste( substr( comp[2], 1, 2 ), substr( comp[2], 3, 4 ), substr( comp[2], 5, 6 ), sep = '-' ) )
write.mat( new_mat_df[[i]], paste0( mat_output_dir, '\\\\', mat_file_name, '.mat' ) )
cat( i, '\n' )
}
library( foreign )
rm(list = ls())
library( foreign )
df = read.xport("E:\\projects\\scoring\\BPX_I.XPT")
View(df)
View(df)
rm(list = ls())
library( foreign )
df = read.xport("E:\\projects\\scoring\\ALB_CR_IBPX_I.XPT")
rm(list = ls())
library( foreign )
df = read.xport("E:\\projects\\scoring\\ALB_CR_I.XPT")
View(df)
rm(list = ls())
library( foreign )
df = read.xport("E:\\projects\\scoring\\BPX_I.XPT")
View(df)
reticulate::repl_python()
import pandas as pd
import os
import sweetviz as sv
os.chdir('E:\projects\prophecy')
log_df = pd.read_excel( 'Experiment log file.xlsx' )
my_report = sv.analyze(log_df)
my_report.show_html()
View(log_df)
log_df['Test: Post Nebulization Resistance(kΩ)'] = pd.to_numeric(log_df['Test: Post Nebulization Resistance(kΩ)'], errors='coerce')
my_report = sv.analyze(log_df)
my_report.show_html()
View(log_df)
import dtale
d = dtale.show(df)
d = dtale.show(log_df)
d.open_browser()
d.open_browser()
d = dtale.show(log_df, host='localhost', subprocess=False)
d.open_browser()
d = dtale.show(log_df, host='localhost')
d.open_browser()
my_report = sv.analyze(log_df)
my_report.show_html()
import datar
import datar
files = os.listdir('E:\projects\prophecy\data')
f = files[0]
f
df0 = pd.read_csv( f )
df0 = pd.read_csv( 'E:\projects\prophecy\data' + '\' + f )
'E:\projects\prophecy\data' + '\' + f
f
'E:\projects\prophecy\data' + '\' + f
'E:\projects\prophecy\data' + '\\' + f
df0 = pd.read_csv( 'E:\projects\prophecy\data' + '\\' + f )
View(df0)
df0.head()
df0.columns
df1 = df0 >> select( ~X.humidity1 )
import datar
df1 = df0 >> select( ~X.humidity1 )
from datar import *
df1 = df0 >> select( ~X.humidity1 )
from datar.all import *
df1 = df0 >> select( ~X.humidity1 )
df1 = df0 >> select( ~humidity1 )
df1 = df0 >> select( ~'humidity1' )
df1 = df0 >> select( -'humidity1' )
df1 = df0 >> select( -humidity1 )
df1 = df0 >> select( -X.humidity1 )
df1 = df0 >> select( -f.humidity1 )
df1 = df0 >> select( f.humidity1 )
from datar.all import *
df1 = df0 >> select( f.humidity1 )
python
__version__
import sys
print(sys.version)
View(select)
starwars >> select(f.homeworld, f.height, f.mass)
from datar.datasets import starwars, iris
starwars >> select(f.homeworld, f.height, f.mass)
