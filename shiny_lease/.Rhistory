final$cum_jump_amount = cumsum( final$jump_amount )
final$threshold = final$threshold + final$cum_jump_amount
final = final %>% mutate( defect_indicator = if_else( llr > threshold, 1, 0 ) )
final$defect_indicator[ 1:100 ] = 0    #... Assumption : No jump will be detected in first 100 points
final = final %>% mutate( run_defect = runSum( defect_indicator, 5 ),
defect_signal = if_else( run_defect >= 4, 1, 0 )
)
final$defect_signal_diff = c( NA, diff( final$defect_signal ) )
final$defect_signal_diff = if_else( final$jump_indicator == 1, 0, final$defect_signal_diff )   #... it is not a defect if it is a jump
defect_rows = final[ which( final$defect_signal_diff == 1 ), ]
if( nrow( defect_rows ) != 0 ){
# annotations
a <- list(
x = defect_rows$Timestamp,
y = defect_rows$llr,
text = paste0( "Defect" ),
xref = "x",
yref = "y",
showarrow = TRUE,
arrowcolor = "red",
arrowsize = 3,
arrowwidth = 1,
arrowhead = 1,
ax = 20,
ay = -40
)
plot_ly(final, x = ~Timestamp, y = ~llr, name = 'llr', type = 'scatter', mode = 'lines') %>%
add_trace(y = ~threshold, name = 'Threshold', mode = 'lines') %>%
layout(annotations = a ) %>%
#    add_trace(y = ~defect_signal, name = 'Defect Signal', line = list( color = 'red', width = 4, dash = 'dot') ) %>%
layout(title = paste0( "Line Plots" ),
xaxis = list(title = ' '),
yaxis = list(title = paste0( "Values" )))
} else{
plot_ly(final, x = ~Timestamp, y = ~llr, name = 'llr', type = 'scatter', mode = 'lines') %>%
add_trace(y = ~threshold, name = 'Threshold', mode = 'lines') %>%
layout(title = paste0( "Line Plots" ),
xaxis = list(title = ' '),
yaxis = list(title = paste0( "Values" )))
}
rm( list = ls() )
library(readr)
library(googleway)
library(stringr)
library(plyr)
library(dplyr)
library(jsonlite)
library(questionr)
library(DataCombine)
geoopen <- data.table::fread("D:/projects/Alain/real_estate_france_lat_lon_script_correction/villes_france.csv")
str(geoopen)
View(geoopen)
geoopentry<- geoopen[1:10,]
View(geoopentry)
# Checking the missing value
sapply(geoopen, function(x) sum(is.na(x)))
api_key <- 'AIzaSyCU0gPc-JTAzdBEl5OuN3vrKRcjTUjfDlU'
dset <- as.data.frame(geoopentry[,19:20])
location = dset
View(location)
View(geoopen)
res <- apply(dset, 1, function(x){
google_places(location = c(x["x.18"], x["lon"]), radius = 10000, place_type = "real_estate_agency", key = api_key)
})
View(res)
dset
geoopen <- read.csv("D:/projects/Alain/real_estate_france_lat_lon_script_correction/villes_france.csv")
str(geoopen)
geoopentry<- geoopen[1:10,]
# Checking the missing value
sapply(geoopen, function(x) sum(is.na(x)))
api_key <- 'AIzaSyCU0gPc-JTAzdBEl5OuN3vrKRcjTUjfDlU'
dset <- as.data.frame(geoopentry[,19:20])
location = dset
View(dset)
res <- apply(dset, 1, function(x){
google_places(location = c(x["x.18"], x["lon"]), radius = 10000, place_type = "real_estate_agency", key = api_key)
})
View( res$`1`)
?google_places
rm( list = ls() )
library(readr)
library(googleway)
library(stringr)
library(plyr)
library(dplyr)
library(jsonlite)
library(questionr)
library(DataCombine)
geoopen <- read.csv("D:/projects/Alain/real_estate_france_lat_lon_script_correction/villes_france.csv")
str(geoopen)
geoopentry<- geoopen[1:10,]
# Checking the missing value
sapply(geoopen, function(x) sum(is.na(x)))
api_key <- 'AIzaSyCU0gPc-JTAzdBEl5OuN3vrKRcjTUjfDlU'
dset <- as.data.frame(geoopentry[,19:20])
location = dset
res <- apply(dset, 1, function(x){
google_places(location = c(x["x.18"], x["lon"]), radius = 10000, place_type = "real_estate_agency", key = api_key)
})
View(res)
api_key <- 'AIzaSyD5KweVVKJvWSBYXz7dQiwnItzyKdtFK-w'
###############################################
# Set up the location
dset <- as.data.frame(geoopentry[,19:20])
location = dset
res <- apply(dset, 1, function(x){
google_places(location = c(x["x.18"], x["lon"]), radius = 10000, place_type = "real_estate_agency", key = api_key)
})
View(res)
google_places(location = c(x["x.18"], x["lon"]), radius = 10000, place_type = "real_estate_agency", key = api_key)
View(res)
google_places(location = c(location, x["lon"]), radius = 10000, place_type = "real_estate_agency", key = api_key)
location
View(geoopen)
dset <- as.data.frame(geoopentry[, c('lat', 'lon')])
location = dset
View(location)
res <- apply(dset, 1, function(x){
google_places(location = c(x["lat"], x["lon"]), radius = 10000, place_type = "real_estate_agency", key = api_key)
})
View(res)
View(res[[1]])
placeidtry<- res$results$place_id
placeidtry
res[[1]]$results
res[[1]]$results$place_id[1]
placeidtry<- res$results$place_id
placeidtry
i=1
placeidtry[[i]]<- cbind(res[[i]]$results$place_id)
print(i)
placeidtry[[i]]
placeidtry
# Checking the missing value
mylist = placeidtry[-which(sapply(placeidtry, is.null))]
loop<- mylist[[n]][i]
nrow(loop)
?google_place_details
mm = google_place_details()
res[[i]]$results$place_id
google_place_details(place_id = 'ChIJ7z8QNecU80cRlTE-bX3FTXw', key=api_key)
mm = google_place_details(place_id = 'ChIJ7z8QNecU80cRlTE-bX3FTXw', key=api_key)
View(mm)
mm[["result"]][["photos"]][["html_attributions"]][[1]]
mm[["result"]][["reviews"]]
mm[["result"]][["opening_hours"]][["periods"]][["open"]]
mm[["result"]][["opening_hours"]][["weekday_text"]]
View(geoopen)
36700*20
View(res[[2]])
View(res[[1]]$results$place_id)
View(res[[1]]$results$types)
View(res[[1]]$results$types[[1]])
View(res[[1]]$results$user_ratings_total)
res[[1]]$results$user_ratings_total
res[[2]][["results"]][["business_status"]]
res[[2]][["results"]][["plus_code"]]
res[[2]][["results"]][["rating"]]
res[[2]][["results"]][["vicinity"]]
res[[1]][["results"]][["vicinity"]]
res[[1]][["results"]][["geometry"]]
res[[1]][["results"]][["plus_code"]]
res[[1]][["results"]][["rating"]]
res[[1]][["results"]][["user_ratings_total"]]
res[[1]][["results"]][["vicinity"]]
mm[["result"]][["formatted_address"]]
hh = google_places(search_string = "Operational real estate agency in France", radius = 10000, place_type = "real_estate_agency",
key = api_key)
View(hh)
hh[["results"]]
View( hh[["results"]] )
ff = google_places(search_string = "CLOSED_TEMPORARILY real estate agency in France", radius = 10000, place_type = "real_estate_agency",
key = api_key)
View(ff)
ff = google_places(search_string = "temporarily closed real estate agency in France", radius = 10000, place_type = "real_estate_agency",
key = api_key)
View(ff)
ff[["results"]][["business_status"]]
ff[["next_page_token"]]
hh = google_places(search_string = "Operational real estate agency in France", place_type = "real_estate_agency",
key = api_key)
View(hh)
hh[["results"]][["name"]]
hh1 = google_places(search_string = "Operational real estate agency in France", place_type = "real_estate_agency",
key = api_key, page_token = ff$next_page_token)
hh1[["results"]][["name"]]
View(hh1)
hh = google_places(search_string = "real estate agency in France", place_type = "real_estate_agency",
key = api_key)
View(hh)
hh1 = google_places(search_string = "real estate agency in France", place_type = "real_estate_agency",
key = api_key, page_token = hh$next_page_token)
View(hh1)
hh2 = google_places(search_string = "real estate agency in France", place_type = "real_estate_agency",
key = api_key, page_token = hh1$next_page_token)
View(hh2)
google_places(search_string = "real estate agency in France", place_type = "real_estate_agency", key = api_key)
mm = google_places(search_string = "real estate agency in France", place_type = "real_estate_agency", key = api_key)
View(mm)
View( mm$results )
mm1 = google_places(search_string = "real estate agency in France", place_type = "real_estate_agency", key = api_key)
View( mm1$results )
mm = google_places(search_string = "real estate agency in USA", place_type = "real_estate_agency", key = api_key)
View(mm)
mm1 = google_places(search_string = "real estate agency in USA", place_type = "real_estate_agency",
key = api_key, page_token = mm$next_page_token )
View(mm1)
mm2 = google_places(search_string = "real estate agency in USA", place_type = "real_estate_agency",
key = api_key, page_token = mm1$next_page_token )
View(mm2)
mm = google_places(location = c(48.8566, 2.3522), radius = 10000, place_type = "real_estate_agency", key = api_key)
View(mm)
mm1 = google_places( 'real estate agency in Paris with business status as operational', place_type = "real_estate_agency", key = api_key )
View(mm1)
mm1 = google_places( 'real estate agency in Paris with business status as closed', place_type = "real_estate_agency", key = api_key )
View(mm1)
mm1[["results"]][["business_status"]]
mm1 = google_places( 'real estate agency in Paris with BUSINESS STATUS as closed', place_type = "real_estate_agency", key = api_key )
View(mm1)
library( curl )
library( RCurl )
kk = getURL( 'https://www.google.com/search?client=firefox-b-d&biw=1536&bih=722&tbm=lcl&sxsrf=ALeKk00pvQ-kP4r9jFBduwnUFssC_w62vg%3A1613416425031&ei=6ccqYMTKAdHAz7sPu5qJwAU&q=list+of+all+real+estate+agents+in+paris&oq=list+of+all+real+estate+agents+in+paris&gs_l=psy-ab.12...0.0.0.37183.0.0.0.0.0.0.0.0..0.0....0...1c..64.psy-ab..0.0.0....0.Dxu3fDK0hhE#rlfi=hd:;si:;mv:[[48.884430699999996,2.3564229],[48.8433133,2.2728648]];tbs:lrf:!1m4!1u3!2m2!3m1!1e1!1m4!1u2!2m2!2m1!1e1!2m1!1e2!2m1!1e3,lf:1,lf_ui:2' )
kk
View(geoopen)
View(geoopentry)
View(geoopen)
mm1 = google_places( 'real estate agency in Paris, France', place_type = "real_estate_agency", key = api_key )
View(mm1)
mm = google_places( 'real estate agency in Paris, France', place_type = "real_estate_agency", key = api_key )
View(mm)
mm1 = google_places( 'real estate agency in Paris, France', place_type = "real_estate_agency", key = api_key, page_token = mm$next_page_token )
View(mm1)
mm2 = google_places( 'real estate agency in Paris, France', place_type = "real_estate_agency", key = api_key, page_token = mm1$next_page_token )
View(mm2)
mm = google_places(location = c(48.8566, 2.3522), radius = 10000, place_type = "real_estate_agency", key = api_key)
View(mm)
mm1 = google_places( c(48.8566, 2.3522), place_type = "real_estate_agency", key = api_key, page_token = mm$next_page_token )
View(mm1)
mm2 = google_places( c(48.8566, 2.3522), place_type = "real_estate_agency", key = api_key, page_token = mm1$next_page_token )
View(mm2)
mm = google_places( 'agences immobilieres a paris', place_type = "real_estate_agency", key = api_key )
View(mm)
kk = google_places( 'agences immobilieres a paris', key = api_key )
View(kk)
kk[["results"]]
mm1 = google_places( c(48.8566, 2.3522), place_type = "real_estate_agency", key = api_key, page_token = kk$next_page_token )
mm1 = google_places( 'agences immobilieres a paris', place_type = "real_estate_agency", key = api_key, page_token = kk$next_page_token )
View(mm1)
mm2 = google_places( 'agences immobilieres a paris', place_type = "real_estate_agency", key = api_key, page_token = mm1$next_page_token )
rm( list = ls() )
library( rmatio ) ; library( dplyr ) ; library( plotly ) ; library( TTR )
data_dir = 'D:\\projects\\Chetan\\onedrive local\\Field test\\Bukom\\BUKOM_06'
files = list.files( data_dir, pattern = '*.mat', full.names = T )
basenames = basename( files ) %>% gsub( '.mat', '', . )
df = ldf = list() ; llr = NULL
for( i in 1:length( files ) ){
df[[i]] = read.mat( files[i] )
llr = df[[i]][["defect_match"]][["llr"]][[1]]
ldf[[i]] = data.frame( 'Timestamp' = basenames[i], 'llr' = llr )
cat( i, '\n' )
}
final_0 = bind_rows( ldf )
range_1st = max( final_0$llr ) - min( final_0$llr )
final_0 = final_0 %>% mutate( 'llr_diff' = c( NA, round( diff( llr ), 2 ) ),
run_max_llr = runMax( llr, 5 ),
run_min_llr = runMin( llr, 5 ),
run_range_llr = run_max_llr - run_min_llr
)
# jump_value = mean( final_0$run_range_llr[1:100], na.rm = T )
final_0$llr_diff[ is.na( final_0$llr_diff ) ] = 0
final = final_0 %>% mutate( run_range_llr_mean = runMean( run_range_llr ),
run_llr_mean = runMean( llr, 3 ),
jump_indicator = ifelse( abs( llr_diff ) >= run_range_llr_mean, 1, 0 ),
jump_amount = sign( llr_diff )*( abs( llr_diff ) - run_range_llr_mean )*jump_indicator
)
final$threshold = max( final$llr[1:100] )
final$jump_amount[ 1:100 ] = 0    #... Assumption : No jump will be detected in first 100 points
final$cum_jump_amount = cumsum( final$jump_amount )
final$threshold = final$threshold + final$cum_jump_amount
final = final %>% mutate( defect_indicator = if_else( run_llr_mean > threshold, 1, 0 ) )  #.. change to llr_mean
final$defect_indicator[ 1:100 ] = 0    #... Assumption : No jump will be detected in first 100 points
final = final %>% mutate( run_defect = runSum( defect_indicator, 10 ),
defect_signal = if_else( run_defect >= 10, 1, 0 )
)
final$defect_signal_diff = c( NA, diff( final$defect_signal ) )
final$defect_signal_diff = if_else( final$jump_indicator == 1, 0, final$defect_signal_diff )   #... it is not a defect if it is a jump
defect_rows = final[ which( final$defect_signal_diff == 1 ), ]
if( nrow( defect_rows ) != 0 ){
# annotations
a <- list(
x = defect_rows$Timestamp,
y = defect_rows$llr,
text = paste0( "Defect" ),
xref = "x",
yref = "y",
showarrow = TRUE,
arrowcolor = "red",
arrowsize = 3,
arrowwidth = 1,
arrowhead = 1,
ax = 20,
ay = -40
)
plot_ly(final, x = ~Timestamp, y = ~llr, name = 'llr', type = 'scatter', mode = 'lines') %>%
add_trace(y = ~threshold, name = 'Threshold', mode = 'lines') %>%
layout(annotations = a ) %>%
#    add_trace(y = ~defect_signal, name = 'Defect Signal', line = list( color = 'red', width = 4, dash = 'dot') ) %>%
layout(title = paste0( "Line Plots" ),
xaxis = list(title = ' '),
yaxis = list(title = paste0( "Values" )))
} else{
plot_ly(final, x = ~Timestamp, y = ~llr, name = 'llr', type = 'scatter', mode = 'lines') %>%
add_trace(y = ~threshold, name = 'Threshold', mode = 'lines') %>%
layout(title = paste0( "Line Plots" ),
xaxis = list(title = ' '),
yaxis = list(title = paste0( "Values" )))
}
rm( list = ls() )
library( dplyr )
df = read.csv( "D:\\projects\\Chetan\\data\\PBtest\\Bosch Test 1_20210228_180625_295.csv", stringsAsFactors = F )
View(df)
values = df$X.uT.[ 1:100 ]
values
values = as.numeric( df$X.uT.[ 1:100 ] )
values
rm( list = ls() )
# Is having a pool essential for a property to be considered a high booking rate property?
#   Are properties accommodating more than 5 guests more likely to be listed as a highly booked property?
#   Do properties with an overall review score greater than 4.5 indicate a higher booking rate?
#   Considering the heat of Texas, does having air conditioning create a higher demand for specific properties?
library(tidyverse)
library(tidymodels)
df_train <- read_csv("D:\\projects\\Greta\\kaggle\\airbnb-train.csv")
with_pool_indices = grepl( 'air conditioning', df_train$amenities, ignore.case = T )
with_pool_df = df_train[ with_pool_indices, 'high_booking_rate' ]
( pool_booking_perct = sum( with_pool_df$high_booking_rate )/nrow( with_pool_df ) )
without_pool_df = df_train[ -with_pool_indices, 'high_booking_rate' ]
( wt_pool_booking_perct = sum( without_pool_df$high_booking_rate )/nrow( without_pool_df ) )
df_train <- read_csv("airbnb-train.csv")
df_test <- read_csv("airbnb-test.csv")
df_train <-
df_train %>%
mutate(high_booking_rate = as.factor(high_booking_rate))
remove_dollar_sign <- c("price", "weekly_price")
# You could add to this list any other variables whose values include a dollar sign
# Other such variables include monthly_price, cleaning_fee, security_deposit, extra_people
df_train_clean <-
df_train %>%
mutate_at(remove_dollar_sign, ~str_replace_all(., pattern="\\$", replacement="")) %>%
mutate_at(remove_dollar_sign, ~str_replace_all(., pattern=",", replacement="")) %>%
mutate_at(remove_dollar_sign, ~as.numeric(.))
df_test_clean <-
df_test %>%
mutate_at(remove_dollar_sign, ~str_replace_all(., pattern="\\$", replacement="")) %>%
mutate_at(remove_dollar_sign, ~str_replace_all(., pattern=",", replacement="")) %>%
mutate_at(remove_dollar_sign, ~as.numeric(.))
df_train_lean <-
df_train_clean %>%
drop_na(host_is_superhost)
df_train_clean = df_train_clean %>% mutate_all(~ifelse(is.na(.x), median(.x, na.rm = TRUE), .x)) %>% suppressWarnings()
df_test_clean = df_test_clean %>% mutate_all(~ifelse(is.na(.x), median(.x, na.rm = TRUE), .x)) %>% suppressWarnings()
library( randomForest )
rm_model = randomForest( x = df_train_analysis %>% select( weekly_price, price, guests_included, beds,
bathrooms, review_scores_rating, host_is_superhost, host_has_profile_pic, accommodates,
availability_365, extra_people, cancellation_policy, bedrooms, bed_type ),
y = df_train_analysis$high_booking_rate )
set.seed(314159)
df_train_clean$high_booking_rate = as.factor( df_train_clean$high_booking_rate )
df_train_split <- initial_split(df_train_clean)
df_train_analysis <- training(df_train_split)
df_train_assessment <- testing(df_train_split)
rm_model_full = randomForest( x = df_train_clean %>% select( weekly_price, price, guests_included, beds,
bathrooms, review_scores_rating, host_is_superhost, host_has_profile_pic, accommodates,
availability_365, extra_people, cancellation_policy, bedrooms, bed_type ),
y = df_train_clean$high_booking_rate )
importance( rm_model_full )
?importance
importance( rm_model_full, scale = T )
varImpPlot( rm_model_full)
with_pool_indices = grepl( 'pool', df_train$amenities, ignore.case = T )
with_pool_df = df_train[ with_pool_indices, 'high_booking_rate' ]
( pool_booking_perct = sum( with_pool_df$high_booking_rate )/nrow( with_pool_df ) )
without_pool_df = df_train[ -with_pool_indices, 'high_booking_rate' ]
( wt_pool_booking_perct = sum( without_pool_df$high_booking_rate )/nrow( without_pool_df ) )
df_train <- read_csv("D:\\projects\\Greta\\kaggle\\airbnb-train.csv")
#... pool / air conditioning analysis ....
with_pool_indices = grepl( 'pool', df_train$amenities, ignore.case = T )
with_pool_df = df_train[ with_pool_indices, 'high_booking_rate' ]
( pool_booking_perct = sum( with_pool_df$high_booking_rate )/nrow( with_pool_df ) )
without_pool_df = df_train[ -with_pool_indices, 'high_booking_rate' ]
( wt_pool_booking_perct = sum( without_pool_df$high_booking_rate )/nrow( without_pool_df ) )
guests_more_5_indices = df_train$guests_included > 5
guests_5_df = df_train[ guests_more_5_indices, 'high_booking_rate' ]
( book_percent_5 = sum( guests_5_df$high_booking_rate )/nrow( guests_5_df ) )
guests_5_not_df = df_train[ -guests_more_5_indices, 'high_booking_rate' ]
( book_percent_not_5 = sum( guests_5_not_df$high_booking_rate )/nrow( guests_5_not_df ) )
setwd("D:/projects/Venkata/shiny_lease")
rsconnect::setAccountInfo(name='rvsbell', token='4DE3067241AA4AC27E1A4E9E1FDB7F8D', secret='3F57i9qnv8vVzQ2cj7HnbMUwRDufH0IPcdH7CB5H')
library( rsconnect)
accountInfo()
accounts()
deployApp( 'D:\\projects\\Venkata\\shiny_lease' )
deployApp( 'D:\\projects\\Venkata\\shiny_lease' )
shiny::runApp()
deployApp( 'D:\\projects\\Venkata\\shiny_lease' )
?deployApp
options(timeout = 4000000)
deployApp( 'D:\\projects\\Venkata\\shiny_lease' )
deployApp( 'D:\\projects\\Venkata\\shiny_lease' )
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
library(DT)
library(dplyr)
getRemoveButton <- function(n, idS = "", lab = "Pit") {
if (stringr::str_length(idS) > 0) idS <- paste0(idS, "-")
ret <- shinyInput(actionButton, n,
'button_', label = "Remove",
onclick = sprintf('Shiny.onInputChange(\"%sremove_button_%s\",  this.id)' ,idS, lab))
return (ret)
}
shinyInput <- function(FUN, n, id, ses, ...) {
as.character(FUN(paste0(id, n), ...))
}
ui = shinyUI(fluidPage(
fluidRow(DT::dataTableOutput("myTable")),
fluidRow(actionButton("addRow", label = "Add Row",
icon = icon("plus"))))
)
server = function(input, output) {
buttonCounter <- 3L
values <- reactiveValues()
values$tab <- tibble(
Row = 1:3L,
id = 1:3L) %>%
rowwise() %>%
mutate(Remove = getRemoveButton(id, idS = "", lab = "Tab1"))
proxyTable <- DT::dataTableProxy("tab")
output$myTable <- DT::renderDataTable({
DT::datatable(values$tab,
options = list(pageLength = 25,
dom        = "rt"),
rownames = FALSE,
escape   = FALSE,
editable = TRUE)
})
observeEvent(input$remove_button_Tab1, {
myTable <- values$tab
s <- as.numeric(strsplit(input$remove_button_Tab1, "_")[[1]][2])
myTable <- filter(myTable, id != s)
replaceData(proxyTable, myTable, resetPaging = FALSE)
values$tab <- myTable
})
observeEvent(input$addRow, {
buttonCounter <<- buttonCounter + 1L
myTable <- isolate(values$tab)
myTable <- bind_rows(
myTable,
tibble(Row = nrow(myTable) + 1) %>%
mutate(id = buttonCounter,
Remove = getRemoveButton(buttonCounter, idS = "", lab = "Tab1")))
replaceData(proxyTable, myTable, resetPaging = FALSE)
values$tab <- myTable
})
}
shinyApp(ui = ui, server = server)
library(DT)
library(dplyr)
getRemoveButton <- function(n, idS = "", lab = "Pit") {
if (stringr::str_length(idS) > 0) idS <- paste0(idS, "-")
ret <- shinyInput(actionButton, n,
'button_', label = "Remove",
onclick = sprintf('Shiny.onInputChange(\"%sremove_button_%s\",  this.id)' ,idS, lab))
return (ret)
}
shinyInput <- function(FUN, n, id, ses, ...) {
as.character(FUN(paste0(id, n), ...))
}
ui = shinyUI(fluidPage(
fluidRow(DT::dataTableOutput("myTable")),
)
server = function(input, output) {
buttonCounter <- 3L
values <- reactiveValues()
values$tab <- tibble(
Row = 1:3L,
id = 1:3L) %>%
rowwise() %>%
mutate(Remove = getRemoveButton(id, idS = "", lab = "Tab1"))
proxyTable <- DT::dataTableProxy("tab")
output$myTable <- DT::renderDataTable({
DT::datatable(values$tab,
options = list(pageLength = 25,
dom        = "rt"),
rownames = FALSE,
escape   = FALSE,
editable = TRUE)
})
observeEvent(input$remove_button_Tab1, {
myTable <- values$tab
s <- as.numeric(strsplit(input$remove_button_Tab1, "_")[[1]][2])
myTable <- filter(myTable, id != s)
replaceData(proxyTable, myTable, resetPaging = FALSE)
values$tab <- myTable
})
}
shinyApp(ui = ui, server = server)
runApp()
runApp()
